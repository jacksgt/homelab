# helm plugin install https://github.com/databus23/helm-diff
# helm plugin install https://github.com/jkroepke/helm-secrets --version v4.5.1

repositories:
 - name: prometheus-community
   url: https://prometheus-community.github.io/helm-charts
 - name: gitea
   url: https://dl.gitea.io/charts/
 - name: incubator
   url: https://charts.helm.sh/incubator
 - name: jameswynn
   url: https://jameswynn.github.io/helm-charts
 - name: bitnamicharts-oci
   url: docker.io/bitnamicharts
   oci: true
 - name: authentik
   url: https://charts.goauthentik.io/


  # - name: myOCIRegistry
  #   url: myregistry.azurecr.io
  #   oci: true

---

environments:
  default:
    values:
      - storage:
          enabled: false
        backup:
          enabled: false
        mariadb:
          enabled: false
  cubieserver:
    values:
      - storage:
          enabled: true
        backup:
          enabled: true
        mariadb:
          enabled: true
          # use XFS partition instead of btrfs
          # Due to the Copy-on-Write concept, btrfs volumes are not well suited for workloads
          # that frequently update their own files, e.g. databases.
          # While CoW can be manually disabled for specific file and directories, this introduces
          # additional operational overhead.
          # https://wiki.archlinux.org/title/Btrfs#Disabling_CoW
          # Thus, the production system has a separate xfs partition
          storageclass: "local-path-xfs"
---

helmDefaults:
  historyMax: 3

releases:
- name: storage
  chart: ./storage
  namespace: kube-system
  condition: storage.enabled

# TODO: also manage backup cronjob with Helmfile
- name: mariadb
  chart: bitnamicharts-oci/mariadb
  version: 14.1.2
  namespace: mariadb
  createNamespace: true
  secrets:
    - ./environments/{{ .Environment.Name }}/mariadb-values.secret.yaml
  # https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
  values:
    - image:
        # https://hub.docker.com/r/bitnami/mariadb/tags
        tag: "10.6"
        # IMPORTANT: check Nextcloud supported versions!
        # https://docs.nextcloud.com/server/latest/admin_manual/installation/system_requirements.html
      auth:
        # "rootPassword" set in secret values.yaml
      # sleep infinity + disable health probes
      # diagnosticMode:
      #   enabled: true
      primary:
        service:
          type: ClusterIP
        persistence:
          storageClass: local-path-xfs
          size: "1"
          annotations:
            # backups are handled with mysqldump for consistency
            # (which is not guaranteed with filesystem-level backups)
            backup-enabled: "false"
      # TODO:
      # extraDeploy:
      # - kind: DatabaseInstance

# helm upgrade --install kube-prometheus-stack -n monitoring -f monitoring/kube-prometheus-stack.values.yaml prometheus-community/kube-prometheus-stack
- name: kube-prometheus-stack
  namespace: monitoring
  createNamespace: true
  version: 45.25.0 # Prometheus version v2.42.0
  chart: prometheus-community/kube-prometheus-stack
  # https://github.com/prometheus-community/helm-charts/blob/7d259fabb8ab61228afde493a4e13825f58ead1d/charts/kube-prometheus-stack/values.yaml
  values:
  - monitoring/kube-prometheus-stack.values.yaml

# helm upgrade --install prometheus-adapter -n monitoring -f monitoring/prometheus-adapter.values.yaml prometheus-community/prometheus-adapter
- name: prometheus-adapter
  namespace: monitoring
  version: 4.2.0
  chart: prometheus-community/prometheus-adapter
  # https://github.com/prometheus-community/helm-charts/blob/7d259fabb8ab61228afde493a4e13825f58ead1d/charts/kube-prometheus-stack/values.yaml
  values:
  - monitoring/prometheus-adapter.values.yaml

# TODO: use `extraDeploy` on the gitea chart instead of this
- name: gitea-extras
  namespace: gitea
  chart: incubator/raw
  values:
  - resources:
    - apiVersion: kci.rocks/v1beta1
      kind: Database
      metadata:
        name: gitea
      spec:
        deletionProtected: true
        instance: mariadb-instance-prod
        secretName: gitea-db-credentials
        secretsTemplates:
          host: {{`'{{ .DatabaseHost }}:{{ .DatabasePort }}'`}}
          name: '{{`{{ .DatabaseName }}'`}}
          password: {{`'{{ .Password }}'`}}
          user: {{`'{{ .UserName }}'`}}
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: custom-gitea-config
      data:
        # Disallow bots from crawling (causes lots of traffic)
        # https://docs.gitea.com/administration/search-engines-indexation
        robots.txt: |
          User-agent: *
          Disallow: /

- name: gitea
  namespace: gitea
  createNamespace: true
  # https://gitea.com/gitea/helm-chart
  # https://gitea.com/gitea/helm-chart#upgrading
  # https://gitea.com/gitea/helm-chart/releases
  chart: "gitea/gitea"
  version: "9.5.1"
  secrets:
    - ./environments/{{ .Environment.Name }}/gitea-values.secret.yaml
  # https://gitea.com/gitea/helm-chart/src/branch/main/values.yaml
  values:
  - image:
      # https://github.com/go-gitea/gitea/tags
      tag: "1.20.5"
      pullPolicy: IfNotPresent
      rootless: true
    gitea:
      # set in gitea-values.secret.yaml
      # admin:
      #   username:
      #   password:
      #   email:

      # Gitea configuration, aka. gitea.ini
      # https://docs.gitea.io/en-us/config-cheat-sheet/
      config:
        APP_NAME: 'Gitea: Git@Cubieserver'
        server:
          SSH_PORT: 2222
          DOMAIN: "" # set via overlay
          OFFLINE_MODE: true
          LANDING_PAGE: "explore"
        actions:
          ENABLED: true # as of v1.20, Gitea Actions are disabled by default
        service:
          # registrations needs to be enabled so new users can join via OIDC
          DISABLE_REGISTRATION: false
          # users should register themselves with the IDP, not in Gitea
          SHOW_REGISTRATION_BUTTON: false
        # https://docs.gitea.com/next/administration/logging-config
        log:
          LEVEL: "Info" # Trace, Debug, Info, Warn, Error, Critical, Fatal, None
        # since v9 of the Helm chart "HA" mode is enabled by default
        # the following settings switch back to standalone mode, see:
        # https://gitea.com/gitea/helm-chart#single-pod-configurations
        # https://gitea.com/gitea/helm-chart/issues/524
        session:
          PROVIDER: db
        cache:
          ADAPTER: memory
        queue:
          TYPE: level
        indexer:
          ISSUE_INDEXER_TYPE: bleve
          REPO_INDEXER_ENABLED: true

      # https://docs.gitea.io/en-us/administration/config-cheat-sheet/#database-database
      additionalConfigFromEnvs:
        # Secret "gitea-db-credentials" is created from gitea-extras chart
        - name: GITEA__DATABASE__DB_TYPE
          value: "mysql"
        - name: GITEA__DATABASE__LOG_SQL
          value: "false"
        - name: GITEA__DATABASE__HOST
          valueFrom:
            secretKeyRef:
              name: gitea-db-credentials
              key: host
        - name: GITEA__DATABASE__NAME
          valueFrom:
            secretKeyRef:
              name: gitea-db-credentials
              key: name
        - name: GITEA__DATABASE__USER
          valueFrom:
            secretKeyRef:
              name: gitea-db-credentials
              key: user
        - name: GITEA__DATABASE__PASSWD
          valueFrom:
            secretKeyRef:
              name: gitea-db-credentials
              key: password

    # https://docs.gitea.com/administration/customizing-gitea
    extraVolumes:
      - name: custom-gitea-config
        configMap:
          name: custom-gitea-config
    extraContainerVolumeMounts:
      - name: custom-gitea-config
        mountPath: /data/gitea/robots.txt
        subPath: robots.txt
        readOnly: true

    persistence:
      enabled: true
      storageClass: "local-path-btrfs"
      size: 1

    strategy:
      type: Recreate

    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 512Mi

    service:
      ssh:
        port: 2222 # see SSH_PORT above

    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        traefik.ingress.kubernetes.io/router.entrypoints: websecure

      # set in gitea-values.secret.yaml
      # hosts:
      # tls:

    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1000
      runAsUser: 1000

    podSecurityContext:
      fsGroup: 1000
      runAsNonRoot: true

    # disabled unwanted dependencies
    memcached:
      enabled: false
    postgresql:
      enabled: false
    postgresql-ha:
      enabled: false
    redis-cluster:
      enabled: false
    test:
      enabled: false

- name: s3-website-gateway
  namespace: static-websites
  createNamespace: true
  chart: "./local_charts/s3-website-gateway/"
  values:
    - image:
        tag: "1.25"
      ingress:
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
      resources:
        limits:
          cpu: 1
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi
      websites:
      - name: www-old
        bucket: www-cubieserver-de
        endpoint: https://s3.cubieserver.de
        hostname: www-old.cubieserver.de
      - name: jacks-blog
        bucket: blog-cubieserver-de
        endpoint: https://s3.cubieserver.de
        hostname: blog.cubieserver.de
      - name: jacks-blog-test
        bucket: blog-cubieserver-de-test
        endpoint: http://minio.minio.svc.cluster.local.:9000
        hostname: test-blog.cubieserver.de
      - name: adeles-blog
        bucket: adele
        endpoint: https://s3.cubieserver.de
        hostname: adeles.cooking

  # Deploys an instance of https://github.com/gethomepage/homepage (https://github.com/gethomepage/homepage)
- name: homepage
  namespace: homepage
  createNamespace: true
  chart: "jameswynn/homepage" # unofficial helm chart: https://github.com/jameswynn/helm-charts/tree/main/charts/homepage
  version: 1.2.1
  values:
    - image:
        # https://github.com/benphelps/homepage/releases
        repository: ghcr.io/gethomepage/homepage
        tag: v0.8.0
      enableRbac: true
      serviceAccount:
        create: true
      resources:
        requests:
          memory: 100Mi
          cpu: 10m
        limits:
          memory: 250Mi
          cpu: 200m

      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities: { drop: ["ALL"] }

      # TODO: redirect "cubieserver.de" to "www.cubieserver.de"
      ingress:
        main:
          enabled: true
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-production
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
          hosts:
          - host: www.cubieserver.de
            paths:
            - path: /
              pathType: Prefix
          tls:
          - hosts:
            - www.cubieserver.de
            secretName: homepage-ingress-secret


      # config files passed to homepage application
      # https://gethomepage.dev/en/configs/services/
      config:
        # https://gethomepage.dev/en/configs/kubernetes/
        kubernetes:
          mode: cluster # use serviceaccount from container

        # https://gethomepage.dev/en/configs/settings
        settings:
          title: "Cubieserver.de - Jack's Homelab"

          # https://unsplash.com/photos/XKEObIMh0V0
          background: "https://images.unsplash.com/photo-1506781994843-d2c500b1dde1?auto=format&fit=crop&w=2560&q=80"
          backgroundOpacity: 0.4
          color: zinc

          headerStyle: boxed

          hideVersion: true

        # https://gethomepage.dev/en/configs/bookmarks
        bookmarks:
          - Links:
            - "Jack's Blog":
              - abbr: JH
                href: https://blog.cubieserver.de
            - "Homelab Git repository":
              - abbr: HL
                href: https://git.cubieserver.de/cubieserver/homelab
            - "Status Page":
              - abbr: SP
                href: https://status.cubieserver.de

        # https://gethomepage.dev/en/configs/services
        # Icons from https://github.com/walkxcode/dashboard-icons are supported
        services:
          - "Web services":
              - Nextcloud:
                  href: https://cloud.cubieserver.de
                  icon: nextcloud.png
                  description: Platform for online file sharing, pictures, contacts, calendar and more
                  namespace: nextcloud
                  app: nextcloud
              - Authentik:
                  href: https://auth.cubieserver.de
                  icon: authentik.png
                  description: Account management & Authentication
                  namespace: authentik
                  app: authentik
              - Gitea:
                  href: https://git.cubieserver.de
                  icon: gitea.png
                  description: Git repository service
                  namespace: gitea
                  app: gitea
              - Jellyfin:
                  href: http://192.168.1.10:8096
                  icon: jellyfin.png
                  description: Media server
                  namespace: jellyfin
                  app: jellyfin

          - "Backend services":
              - ejabberd:
                  icon: mdi-xmpp
                  description: XMPP messaging server
                  namespace: ejabberd
                  app: ejabberd
              - Minio:
                  href: https://console-s3.cubieserver.de
                  icon: minio.png
                  description: S3 blob storage
                  namespace: minio
                  app: minio
              - Traefik:
                  icon: traefik.png
                  description: HTTP proxy and router
                  namespace: traefik
                  app: traefik
              - PostgreSQL:
                  icon: postgres.png
                  description: Postgres relational database
                  namespace: postgres
                  app: postgresql
              - MariaDB:
                  icon: mariadb.png
                  description: MySQL-compatible SQL database
                  namespace: mariadb
                  app: mariadb
              - k3s:
                  icon: https://k3s.io/img/k3s-logo-light.svg
                  description: Kubernetes cluster



        # https://gethomepage.dev/en/configs/widgets
        widgets:
          - logo:
              icon: https://blog.cubieserver.de/images/wheel.jpg

          - greeting:
              text_size: 2xl
              text: "Jack's Homelab"

          - search:
              provider: duckduckgo
              target: _self

          # CURRENTLY DISABLED BECAUSE METRICS ARE NOT AVAILABLE
          # show the kubernetes widget, with the cluster summary and individual nodes
          # - kubernetes:
          #     cluster:
          #       show: true
          #       cpu: true
          #       memory: true
          #       showLabel: false
          #       label: "cluster"
          #     nodes:
          #       show: false
          #       cpu: false
          #       memory: false
          #       showLabel: false

# TODO: also manage backup cronjob with Helmfile
- name: postgres
  chart: bitnamicharts-oci/postgresql
  version: 13.2.9
  namespace: postgres
  createNamespace: true
  secrets:
    - ./environments/{{ .Environment.Name }}/postgres-values.secret.yaml
  # https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
  values:
    - fullnameOverride: "postgres"
      image:
        # https://hub.docker.com/r/bitnami/postgresql/tags
        registry: docker.io
        repository: bitnami/postgresql
        tag: 14-debian-11
      # sleep infinity + disable health probes
      # diagnosticMode:
      #   enabled: true
      auth:
        # postgresPassword set in secret.yaml
      serviceAccount:
        create: true
      # TODO: requests: {}
      primary:
        service:
          type: ClusterIP
        persistence:
          storageClass: "local-path-xfs"
          size: 1
          annotations:
            # backups are handled via pgdump to be fully consistent
            # (which is not guaranteed with filesystem-level backups)
            backup-enabled: "false"
      # TODO:
      # extraDeploy:
      # - apiVersion: kci.rocks/v1beta1
      #   kind: DbInstance
      #   ...

- name: authentik
  # https://github.com/goauthentik/authentik/releases
  # https://goauthentik.io/docs/releases
  # https://github.com/goauthentik/helm
  # note Authentik releases and Helm chart releases are in-sync
  chart: authentik/authentik
  version: "2023.10.3"
  namespace: authentik
  createNamespace: true
  secrets:
    - ./environments/{{ .Environment.Name }}/authentik-values.secret.yaml
  # https://github.com/goauthentik/helm/blob/main/charts/authentik/values.yaml
  values:
    - authentik:
        # https://goauthentik.io/docs/installation/configuration
        avatars: "none"
        log_level: "info" # trace, debug, info, warning, error
        # "secret_key" set from secret-helm-values
        error_reporting:
          enabled: false
        disable_update_check: true
        disable_startup_analytics: true
        postgresql: null # postgres config is set via environment variables
        # "secret_key" is set in secret values.yaml

      envFrom:
        - secretRef:
            name: authentik-db-credentials

      livenessProbe:
        enabled: true
        initialDelaySeconds: 60
        periodSeconds: 30

      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
        - host: auth.cubieserver.de
          paths:
          - path: /
            pathType: Prefix
        tls:
        - hosts:
          - auth.cubieserver.de
          secretName: authentik-ingress-cert

      resources:
        server:
          requests:
            memory: 450Mi
            cpu: 10m
          limits:
            memory: 900Mi
        worker:
          requests:
            memory: 250Mi
            cpu: 10m
          limits:
            memory: 500Mi
            cpu: 100m

      # deploy Bitnami's Redis chart as a dependency
      redis:
        enabled: true
        # redis is only used as a cache / queue, no need for persistence
        # disabling persistence uses emptyDir instead
        # https://github.com/bitnami/charts/blob/master/bitnami/redis/README.md
        master:
          persistence:
            enabled: false

      # we deploy our own postgres instance
      poostgresql:
        enabled: false

      # for server
      securityContext:
        runAsNonRoot: true
      podSecurityContext:
        allowPrivilegeEscalation: false
        capabilities: { drop: ["ALL"] }
        readOnlyRootFilesystem: true

      # for worker
      worker:
        securityContext:
          runAsNonRoot: true
        podSecurityContext:
          allowPrivilegeEscalation: false
          capabilities: { drop: ["ALL"] }
          readOnlyRootFilesystem: true

      prometheus:
        serviceMonitor:
          create: false # TODO: enable metrics

- name: authentik-extras
  namespace: authentik
  chart: incubator/raw
  values:
  - resources:
    - apiVersion: kci.rocks/v1beta1
      kind: Database
      metadata:
        name: authentik
      spec:
        deletionProtected: true
        instance: pg-instance-prod
        secretName: authentik-db-credentials
        secretsTemplates:
          # https://goauthentik.io/docs/installation/configuration#postgresql-settings
          AUTHENTIK_POSTGRESQL__HOST: {{` "{{ .DatabaseHost }}" `}}
          AUTHENTIK_POSTGRESQL__NAME: {{` "{{ .DatabaseName }}" `}}
          AUTHENTIK_POSTGRESQL__USER: {{` "{{ .UserName }}" `}}
          AUTHENTIK_POSTGRESQL__PORT: {{` "{{ .DatabasePort }}" `}}
          AUTHENTIK_POSTGRESQL__PASSWORD: {{` "{{ .Password }}" `}}
          AUTHENTIK_POSTGRESQL__USE_PGBOUNCER: "false"
