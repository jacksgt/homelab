# https://github.com/bitnami/charts/blob/postgresql/16.7.27/bitnami/postgresql/values.yaml
fullnameOverride: "postgres"

global:
  security:
    # allow custom images
    allowInsecureImages: true
image:
  # https://hub.docker.com/_/postgres/
  registry: docker.io
  repository: library/postgres
  tag: 17.6-trixie
# diagnosticMode = sleep infinity + disable health probes
diagnosticMode:
  enabled: false
auth:
  # this secret is deployed via extraDeploy from postgres-values.secret.yaml
  existingSecret: "postgres-admin-secret"
  secretKeys:
    adminPasswordKey: "password"
serviceAccount:
  create: true
# need to use a sub-directory of the mount path here because otherwise postgres' initdb goes crazy about the permissions
postgresqlDataDir: /var/postgres/data
primary:
  service:
    type: ClusterIP
  pdb:
    # no need for a PodDisruptionBudget
    create: false
  persistence:
    # using a non-standard mount here to avoid shenanigans caused by the fact
    # that the official postgres docker image sets VOLUME directives
    mountPath: /var/postgres
    storageClass: "local-path-xfs"
    size: 1
    annotations:
      # backups are handled via pgdump to be fully consistent
      # (which is not guaranteed with filesystem-level backups)
      backup-enabled: "false"
  extraEnvVars:
    # this makes sure files such as .psql_history are preserved
    - name: HOME
      value: /var/postgres
  resources:
    requests:
      cpu: 250m
      memory: 250Mi
    limits:
      cpu: 1
      memory: 1Gi
  extraVolumeMounts:
    - name: var-run
      mountPath: /var/run
  extraVolumes:
    - name: var-run
      empytDir: {}

  # official postgres image has user postgres:999:999
  podSecurityContext:
    enabled: true
    fsGgroup: 999
  containerSecurityContext:
    enabled: true
    runAsUser: 999
    runAsGroup: 999
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]

  networkPolicy:
    enabled: true
    # do not allow outgoing connections (except cluster services, DNS etc.)
    allowExternalEgress: false
    # deny all ingress except matching pods
    # disable the value below for debugging
    allowExternal: false
    ingressNSPodMatchLabels:
      networkpolicy-postgres-access: "enabled"
    # Unfortunately it is not easy to manage Namespace labels with Helm, therefore these labels have to be added manually to the relevant namespace.
    ingressNSMatchLabels:
      networkpolicy-postgres-access: "enabled"

backup:
  enabled: true
  cronjob:
    schedule: "14 1 * * *"
    concurrencyPolicy: Forbid
    restartPolicy: Never
    labels:
      networkpolicy-postgres-access: "enabled"
    storage:
      storageClass: "local-path-btrfs"
      size: 1
      mountPath: "/backup"
    # Note that various PG* environment variables are automatically set by the Helm chart
    command:
      - /bin/bash
      - -c
      - |
        set -u
        # looks like we need a little time here before we can connect to the DB ... no clue why
        sleep 5
        export PGPASSWORD="${PGPASSWORD:-$(< "$PGPASSWORD_FILE")}"
        DATABASES=$(psql -At -c "SELECT datname FROM pg_database WHERE NOT datistemplate AND datallowconn ORDER BY datname;")
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to get list of databases, aborting".
          exit 1
        fi
        for DB in $DATABASES; do
          echo "Backing up database ${DB}..."
          BACKUP_FILE="${DB}_$(date '+%Y%m%d-%H%M%S').sql"
          START_TS="$SECONDS"
          pg_dump --clean --if-exists --format=plain "$DB" > "${PGDUMP_DIR}/${BACKUP_FILE}"
          if [ $? -ne 0 ]; then
            echo "ERROR: Database backup failed, aborting."
            exit 1
          fi
          echo "Successfully backed up ${DB} to ${BACKUP_FILE} in $(( $SECONDS - $START_TS ))s"
          echo "---"
        done
        echo "Cleaning up database backups that are older than 14 days..."
        find "${PGDUMP_DIR}" -type f -name '*.sql' -mtime "+14" -print -delete
        echo "---"
        echo "Done."

# see also `extraDeploy` in postgres-values.secret.yaml
